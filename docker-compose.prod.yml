version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: employee_api_db
    environment:
      POSTGRES_USER: employee
      POSTGRES_PASSWORD: change-me
      POSTGRES_DB: employee_api_production
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U employee -d employee_api_production"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks: [app_net]

  redis:
    image: redis:7-alpine
    container_name: employee_api_redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks: [app_net]

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUBY_VERSION: "3.3.0"
    image: employee_api:prod
    container_name: employee_api_app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      RAILS_ENV: production
      RAILS_LOG_LEVEL: info
      DATABASE_URL: postgres://employee:change-me@db:5432/employee_api_production
      REDIS_URL: redis://redis:6379/1
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      APP_TIME_ZONE: ${APP_TIME_ZONE:-UTC}
      CLIENTS_API_URL: ${CLIENTS_API_URL:-https://jsonplaceholder.typicode.com}
      PORT: 80
    ports:
      - "3000:80"
    restart: unless-stopped
    networks: [app_net]

volumes:
  db_data:
  redis_data:

networks:
  app_net:
